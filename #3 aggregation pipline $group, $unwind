# group the data based on the date, see how many ppl born in the same year and sort the result in a decending order
# first convert the birthday into date type

db.person.aggregate([ 
                     {$project:{_id:0,birthdate:{$toDate:"$dob.date"}}},
                     {$group:{_id:{birthYear:{$isoWeekYear:"$birthdate"}},sumPpl:{$sum:1}}},
                     {$sort:{sumPpl:-1}}
                    ])


# push operator
# group the data based on age and combine the hobby array

db.friend.aggregate([
{$group:{_id:{age:"$age"},hobby:{$push:"$hobbies"}}}
])

# in the above example, the value that is pushed into an array is also an array
# we can remove the array by using the $unwind 
# $unwind helps to flatten the array by repeating the documents

db.friends.aggregate([
{$unwind:"$hobbies"},
{$group:{_id:{age:"$age"},allHobbies:{$push:"$hobbies"}}}
])

# with the exmple above, we can find that some values in the allHobbies array are duplicate
# we can use the $addToSet operator to solve this problem

db.friends.aggregate([
{$unwind:"$hobbies"},
{$group:{_id:{age:"$age"},allHobbies:{$addToSet:"$hobbies"}}}
])

#output the first value of the array using the $slice operator 
# 1 means how many item to output started from the beginning

db.friends.aggregate([
{$project:{_id:0,score:{$slice:["$examScore",1]}}}
])

#output the last two value of the array using the $slice operator 

db.friends.aggregate([
{$project:{_id:0,score:{$slice:["$examScore",-2]}}}
])

#output the array using the $slice operator, start from position 2 and output one element 

db.friends.aggregate([
{$project:{_id:0,score:{$slice:["$examScore",2,1]}}}
])
